struct B {
  void fxn();
};

template <class T>
struct A{
  void fxn();
  static B x; public: static int __offset_x;static decltype(x)& x_getter(){  char* data = get_sstmac_global_data();  void* offsetPtr = data + __offset_x;return *((decltype(x)*)(offsetPtr));}
};

template <class T> B A<T>::x;template <class T> int A<T>::__offset_x = sstmac::inplace_cpp_global<A<T>, B,false>();

template <class T>
void
A<T>::fxn(){

 this->x_getter().fxn();
  decltype(A<T>::x) var;
}

decltype(A<int>::x) var;void* __ptr_var = &var; int __sizeof_var = sizeof(var); extern int __offset_var; sstmac::CppGlobal* var_sstmac_ctor = sstmac::new_cpp_global<decltype(A<int>::x),false>(__offset_var); 
#include <sstmac/software/process/global.h>

extern int __sizeof_var;
extern void* __ptr_var;
int __offset_var = sstmac::GlobalVariable::init(__sizeof_var,"var",__ptr_var,false);
