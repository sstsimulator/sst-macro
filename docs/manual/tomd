#! /usr/bin/env python3

import glob
import sys
import re
import os

math_regexp = re.compile(r'\\\[(.*?)\\\]', re.DOTALL)
inline_math_regexp = re.compile(r'\$(.*?)\$')

section_template = r'\\begin{%s}(.*?)\\end{%s}'
comment_regexp = re.compile(r'%(.*)')
quotes_regexp = re.compile(r"``(.*?)''", re.DOTALL)
newcommand_regexp = re.compile(r'\newcommand.*')
arrayStretch_regexp = re.compile(r'\\def\\arraystre.*')
#display_regexp = re.compile(r'\\\[(.*?)\\\]', re.DOTALL)

tabular_regexp = re.compile(r'\\begin{tabular}{.*?}(.*?)\\end{tabular}', re.DOTALL)
param_table_regexp = re.compile(r'\\openTable(.*?)\\end{tabular}',re.DOTALL)

toc_lines = ["# Table of Contents"]

section = 0
subsection = 0
subsubsection = 0
chapter = 0

refs = {}

figureCount = 1

def make_toc(text):
  toc_text = "\n".join(toc_lines)
  text = text.replace(r'\tableofcontents', toc_text)
  return text

def macro_regexp(x, n=1):
  retext = r'\\%s{(.*?)[}]+' % x
  for i in range(1,n):
    retext += '{(.*?)}'
  return re.compile(retext, re.DOTALL)

def section_header_regexp():
  retext = r'\\([a-z]+){(.*?)}\s*\\label{(.*?)}' 
  return re.compile(retext)

def labeled_macro_regexp(x):
  retext = r'\\%s{(.*?)}\s*\\label{(.*?)}' % x
  return re.compile(retext)

def optmacro_regexp(x):
  retext = r'\\%s\s*\[(.*?)\]\s*{(.*?)[}]+' % x
  return re.compile(retext, re.DOTALL)

def section_regexp(x):
  return re.compile(section_template % (x,x), re.DOTALL)

def repl_title(x):
  return "# %s" % x.groups()[0]

def repl_quotes(x):
  return '"%s"' % x.groups()[0]

param_table_header = "| Name (type) | Default | Allowed | Description |"
def repl_tabular(match, table_header=""):
  text = match.groups()[0]
  text = text.replace("\n"," ")
  text = text.replace(r'\hline','')
  text = text.replace(r'\newline','')
  rows = text.split(r'\\')
  row_arr = ["", table_header, ""]
  table_sep = ""
  num_entries = 0
  for row in rows:
    row = row.strip()
    if not row:
      continue
    entries = row.split('&')
    line_arr = []
    num_entries = len(entries)
    for e in entries:
      line_arr.append(e.strip())
      
    row = "| %s |" % " | ".join(line_arr)
    if not row_arr[1]: #no header
      row_arr[1] = row
    else:
      row_arr.append(row)

    
  
  sep_arr = []
  for e in row_arr[1].split("|"):
    sep_arr.append("-"*len(e))
  table_sep = "|".join(sep_arr)
  row_arr[2] = table_sep

  if len(row_arr) == 3: #no rows except header
    sep_arr = []
    for e in row_arr[1].split("|"):
      sep_arr.append(" "*len(e))
    row = "|".join(sep_arr)
    row_arr.append(row)

  #sys.stderr.write("%s\n" % row_arr)
  text = "\n".join(row_arr)
  #sys.stderr.write("%s\n" % text)
  return text
  

paragraph_split_cleanup_regexp = re.compile(r'\n[\t ]*\n')
def process_paragraphs(text):
  par_arr = []
  for paragraph in text.split("\n\n"):
    if "------------" in paragraph: #table - already processed
      return text
    paragraph = paragraph.strip()
    if "```" in paragraph or "-  " in paragraph:
      par_arr.append(paragraph)
    else:
      str_arr = []
      for line in paragraph.splitlines():
        line = line.strip()
        str_arr.append(line)
      paragraph = " ".join(str_arr)
      par_arr.append(paragraph)
  return "\n\n".join(par_arr)

def repl_display(match):
  return r'\[display\n%s\n\]' % match.groups()[0]

def process_itemize(match):
  items = match.groups()[0].split(r'\item')
  str_arr = [""]
  for item in items[1:]:
    item = item.strip()
    str_arr.append("-   %s" % item)
  return "\n".join(str_arr)

include_fig_optargs_regexp = optmacro_regexp("includegraphics")
include_fig_regexp = macro_regexp("includegraphics")
def get_figure_text(label, caption, text, figpath):
  fname = include_fig_regexp.search(text)
  if not fname:
    fname = include_fig_optargs_regexp.search(text)
    if not fname:
      print(text)
      sys.exit("failed parsing figure")
    else:
      fname = fname.groups()[1]
  else:
    fname = fname.groups()[0]
  
  labelText = ""
  if label:
    labelText = '<a name="%s"></a>' % label

  if caption == "":
    captionText = ""
  else:
    captionText = "*%s*" % caption

  return "\n![%s](https://github.com/sstsimulator/sst-macro/blob/devel/docs/%s/%s) %s\n\n%s\n\n" % (caption, figpath, fname, "", captionText)

def process_title_pic(match, figpath):
  text = match.groups()[0] + "}"
  return get_figure_text(None, "", text, figpath)

label_regexp = macro_regexp("label")
caption_regexp = macro_regexp("caption")

doProcessFile = None

def repl_section_header(match, sectionType, count):
  global chapter, section, subsection, subsubsection
  prefix = '#' * count
  name = ""
  ref = ""
  text = "%s %d %d %d %d" % (str(match.groups()), chapter, section, subsection, subsubsection)
  toc_line = None
  if sectionType == "chapter":
    chapter += 1
    name = "Chapter %d" % chapter
    ref = "%d" % chapter
    section = 0
    subsection = 0
    subsubsection = 0
  elif sectionType == "section":
    section += 1
    ref = "%d.%d" % (chapter, section)
    name = "Section %s" % ref
    subsection = 0
    subsubsection = 0
  elif sectionType == "subsection":
    subsection += 1
    ref = "%d.%d.%d" % (chapter, section, subsection)
    name = ref
    subsubsection = 0
  elif sectionType == "subsubsection":
    subsubsection += 1
    ref = "%d.%d.%d.%d" % (chapter, section, subsection, subsubsection)
    name = ""

  toc_prefix = "   " * (count-1)

  header = match.groups()[1]
  text = None
  if name:
    text =  '%s: %s' % (name, header)
  else:
    text =  header

  toc_line = "%s- [%s]" % (toc_prefix, text)

  if len(match.groups()) == 3: #labeled
    label = match.groups()[2]
    #markdown doesn't support colons
    label = label.replace(":", "_")
    toc_line += "(#%s)" % label
    refs[label] = ref
    text += '<a name="%s"></a>' % label

  toc_lines.append(toc_line)
  
  return "%s %s\n\n" % (prefix, text)



def process_figure(match, figpath):
  global figureCount
  text = match.groups()[0]

  next_fig_id = figureCount
  figureCount += 1

  label = label_regexp.search(text)
  if label: 
    label = label.groups()[0].strip().replace(":","_")
    refs[label] = "%d" % next_fig_id
  
  caption = caption_regexp.search(text)

  if caption: 
    caption = "Figure %d: %s" % (next_fig_id, caption.groups()[0])
  else:
    caption = "Figure %d" % next_fig_id

    
  return get_figure_text(label, caption, text, figpath)


def delete_comment(x):
  return ""

def return_code(x):
  return '`%s`' % x.groups()[0]

def process_ref(match):
  try:
    label = match.groups()[0].replace(":","_")
    return "[%s](#%s)" % (refs[label], label)
  except KeyError:
    return ""

def process_input(match):
  fname = match.groups()[0] + ".tex"
  text = open(fname).read()
  return text

def repl_code_block(match):
  oldBlock = match.groups()[0].strip()
  newBlock = "\n".join(oldBlock.splitlines())
  repl = "````\n%s\n````" % newBlock
  return repl

def repl_param_type(match):
  old = match.groups()[0].strip()
  new = "(%s)" % old
  return new

def clean_up_math(text):
  def repl(match):
    return "(%s)" % match.groups()[0]
  regexp = re.compile("_{(.*?)}")
  return regexp.sub(repl, text)

def repl_inline_math(match):
  text = match.groups()[0].strip()
  if "SST" in text or "PATH" in text:
    return "$%s$" % (text)
  else:
    return clean_up_math(text)

def repl_math(match):
  text = match.groups()[0].strip()
  #sys.stderr.write("MATCH=%s\n" % text)
  return "\n%s\n" % clean_up_math(text)

def return_self(match):
  return match.groups()[0]

def labeled_header_pair(sectionName, count):
  return (labeled_macro_regexp(sectionName), lambda x: repl_section_header(x, sectionName, count))

def header_pair(sectionName, count):
  return (macro_regexp(sectionName), lambda x: repl_section_header(x, sectionName, count))

def return_bold(match):
  return "**%s**" % match.groups()[0]

startFile = sys.argv[1]
root = sys.argv[2]

repls = [
  (newcommand_regexp, ''),
  (arrayStretch_regexp, ''),
  (quotes_regexp, repl_quotes),
  (r'\nodecls',r'\inlinecode{node}'),
  (r'\topcls',r'\inlinecode{topology}'),
  (r'\switchid',r'\inlinecode{SwitchId}'),
  (r'\nodeid',r'\inlinecode{NodeId}'),
  (r'\evhandler',r'\inlinecode{EventHandler}'),
  (r'\evscheduler',r'\inlinecode{EventScheduler}'),
  (r'\evmgr',r'\inlinecode{EventManager}'),
  (section_regexp("CppCode")  , repl_code_block),
  (section_regexp("ShellCmd") , repl_code_block),
  (section_regexp("ViFile")   , repl_code_block),
  (section_regexp("figure")   , lambda x: process_figure(x, root)),
  (section_regexp("itemize")   , process_itemize),
  (section_regexp("enumerate")   , process_itemize),
  (section_regexp("center") , return_self),
  (macro_regexp('paramType') , repl_param_type),
  (paragraph_split_cleanup_regexp , "\n\n"),
  (param_table_regexp , lambda x: repl_tabular(x, param_table_header)),
  (tabular_regexp , lambda x: repl_tabular(x,"")),
  (math_regexp, repl_math),
  (inline_math_regexp, repl_inline_math),
  (macro_regexp('title') , repl_title),
  (macro_regexp('aside') , return_self),
  (macro_regexp('titlepic') , lambda x: process_title_pic(x, root)),
  (macro_regexp('inlineshell') , return_code),
  (macro_regexp('inlinecode') , return_code),
  (macro_regexp('inlinefile') , return_code),
  (macro_regexp('func') , return_code),
  (macro_regexp('emph') , return_self),
  (macro_regexp('textit') , return_self),
  (macro_regexp('author') , ""),
  (macro_regexp('url') , return_self),
  (r'\rightarrow', '->'),
  (r'\geq', '&gt;='),
  (r'\bmod', 'mod'),
  (r'\cdot', '&times;'),
  (r'\times', 'X'),
  (r'\Delta', '&Delta;'),
  (r'\alpha', '&alpha;'),
  (r'\beta', '&beta;'),
  (r'\mu', '&mu;'),
  (r'\centering' , ''),
  (r'\sstmacro' , 'SST-macro'),
  (r'\sprockit', 'SProCKit'),
  (r'\maketitle' , ''),
  (r'\begin{document}' , ''),
  (r'\end{document}' , ''),
  (r'\evhandler', '`EventHandler`'),
  (r'\evscheduler', '`EventScheduler`'),
  (r'\evmgr', '`EventManager`'),
]


def processFile(f):
  inp_regexp = macro_regexp('input')
  text = open(f).read()
  while r'\input' in text:
    text = inp_regexp.sub(process_input, text)
  lines = text.split("\n")
  newtext = ""
  newline = "\n"
  iscode = False
  for l in lines:
    if l.find("CppCode") > -1:
      if iscode == True:
        iscode = False
      else:
        iscode = True
    if not iscode:
      l = comment_regexp.sub("", l)
    newtext = newline.join((newtext,l))
  #text = comment_regexp.sub("", text)
  for matcher, repl in repls:
    if isinstance(matcher, str):
      newtext = newtext.replace(matcher, repl)
    else:
      newtext = matcher.sub(repl, newtext)
  return newtext
doProcessFile = processFile



sections = {
  "chapter" : 2,
  "section" : 3,
  "subsection" : 4,
  "subsubsection" : 5
}

text = processFile(startFile)
reobj = section_header_regexp()
foundMatch = True
while foundMatch:
  foundMatch = reobj.search(text)
  if foundMatch:
    sectionType = foundMatch.groups()[0]
    if not sectionType in sections:
      continue

    repl = lambda x: repl_section_header(x, sectionType, sections[sectionType])
    text = reobj.sub(repl, text, 1)
text = macro_regexp('ref').sub(process_ref, text)
text = process_paragraphs(text)
text = make_toc(text)
header = """---
title: Manual for SST-Macro 14.x
published: true
category: SSTDocumentation
---"""
print(header)
print(text)


